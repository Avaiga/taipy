{
    "controls": [
        [
            "scenario_selector",
            {
                "inherits": [
                    "core_gui_shared"
                ],
                "properties": [
                    {
                        "name": "value",
                        "default_property": true,
                        "type": "dynamic(Scenario)",
                        "doc": "Bound to the selected <code>Scenario^</code>, or None if there is none."
                    },
                    {
                        "name": "show_add_button",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the button to create a new scenario is not displayed."
                    },
                    {
                        "name": "display_cycles",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the cycles are not shown."
                    },
                    {
                        "name": "show_primary_flag",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the primary scenarios are not identified with specific visual hint."
                    },
                    {
                        "name": "on_change",
                        "type": "Union[str, Callable]",
                        "doc": "A function or the name of a function that is triggered when the value is updated.<br/>The parameters of that function are all optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>var_name (str): the variable name.</li>\n<li>value (<code>Scenario^</code>): the selected scenario.</li>\n</ul>",
                        "signature": [
                            [
                                "state",
                                "State"
                            ],
                            [
                                "var_name",
                                "str"
                            ],
                            [
                                "value",
                                "optional[Scenario]"
                            ]
                        ]
                    },
                    {
                        "name": "height",
                        "type": "str",
                        "default_value": "\"50vh\"",
                        "doc": "The maximum height, in CSS units, of the control."
                    },
                    {
                        "name": "show_pins",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If True, a pin is shown on each item of the selector and allows to restrict the number of displayed items."
                    },
                    {
                        "name": "on_creation",
                        "type": "Union[str, Callable]",
                        "doc": "A function or the name of a function that is triggered when a scenario is about to be created.<br/><br/>All the parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (str): the identifier of this scenario selector.</li>\n<li>payload (dict): the details on this callback's invocation.<br/>\nThis dictionary has the following keys:\n<ul>\n<li>config (str): the name of the selected scenario configuration.</li>\n<li>date (datetime): the creation date for the new scenario.</li>\n<li>label (str): the user-specified label.</li>\n<li>properties (dic): a dictionary containing all the user-defined custom properties.</li>\n</ul>\n</li>\n<li>The callback function can return a scenario, a string containing an error message (a scenario will not be created), or None (then a new scenario is created with the user parameters).</li>\n</ul>",
                        "signature": [
                            [
                                "state",
                                "State"
                            ],
                            [
                                "id",
                                "str"
                            ],
                            [
                                "payload",
                                "dict"
                            ]
                        ]
                    },
                    {
                        "name": "show_dialog",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If True, a dialog is shown when the user click on the 'Add scenario' button."
                    },
                    {
                        "name": "scenarios",
                        "type": "dynamic(list[Scenario|Cycle])",
                        "doc": "TODO: The list of <code>Scenario^</code>/<code>Cycle^</code> to show. Shows all Cycle/Scenario if value is None."
                    },
                    {
                        "name": "multiple",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "TODO: If True, the user can select multiple scenarios."
                    },
                    {
                        "name": "filter",
                        "type": "bool|str|taipy.gui_core.filters.ScenarioFilter|list[str|taipy.gui_core.filters.ScenarioFilter]",
                        "default_value": "\"*\"",
                        "doc": "TODO: a list of <code>Scenario^</code> attributes to filter on. If False, do not allow filter."
                    },
                    {
                        "name": "show_search",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "TODO: If True, allows the user to search locally on label."
                    },
                    {
                        "name": "sort",
                        "type": "bool|str|taipy.gui_core.filters.ScenarioFilter|list[str|taipy.gui_core.filters.ScenarioFilter]",
                        "default_value": "\"*\"",
                        "doc": "TODO: a list of <code>Scenario^</code> attributes to sort on. If False, do not allow sort."
                    }
                ]
            }
        ],
        [
            "scenario",
            {
                "inherits": [
                    "core_gui_shared"
                ],
                "properties": [
                    {
                        "name": "scenario",
                        "default_property": true,
                        "type": "dynamic(Scenario|list[Scenario])",
                        "doc": "The scenario to display and edit.<br/>If the value is a list, it must have a single element otherwise nothing is shown."
                    },
                    {
                        "name": "active",
                        "type": "dynamic(bool)",
                        "default_value": "True",
                        "doc": "Indicates if this component is active.<br/>An inactive component allows no user interaction."
                    },
                    {
                        "name": "expandable",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If True, the scenario viewer can be expanded.<br/>If False, the scenario viewer is not expandable and it is shown depending on expanded value."
                    },
                    {
                        "name": "expanded",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If True, when a valid scenario is selected, the scenario viewer is expanded and its content is displayed.<br/>If False, the scenario viewer is collapsed and only its name and <i>submit</i> button are visible."
                    },
                    {
                        "name": "show_submit",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the scenario submit button is not visible."
                    },
                    {
                        "name": "show_delete",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the button to delete a scenario is not visible."
                    },
                    {
                        "name": "show_config",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If False, the scenario configuration label is not visible."
                    },
                    {
                        "name": "show_creation_date",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If False, the scenario creation date is not visible."
                    },
                    {
                        "name": "show_cycle",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If False, the scenario cycle label is not visible."
                    },
                    {
                        "name": "show_tags",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the scenario tags are not visible."
                    },
                    {
                        "name": "show_properties",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the scenario properties are not visible."
                    },
                    {
                        "name": "show_sequences",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the scenario sequences are not visible."
                    },
                    {
                        "name": "show_submit_sequences",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the buttons to submit scenario sequences are not visible."
                    },
                    {
                        "name": "on_submission_change",
                        "type": "Union[str, Callable]",
                        "doc": "A function or the name of a function that is triggered when a submission status is changed.<br/><br/>All the parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>submission (Submission): the submission entity containing submission information.</li>\n<li>details (dict): the details on this callback's invocation.<br/>\nThis dictionary has the following keys:\n<ul>\n<li>submission_status (str): the new status of the submission (possible values are: \"SUBMITTED\", \"COMPLETED\", \"CANCELED\", \"FAILED\", \"BLOCKED\", \"WAITING\", or \"RUNNING\").</li>\n<li>job: the Job (if any) that is at the origin of the submission status change.</li>\n<li>submittable_entity (Submittable): the entity (usually a Scenario) that was submitted.</li>\n</ul>",
                        "signature": [
                            [
                                "state",
                                "State"
                            ],
                            [
                                "submission",
                                "Submission"
                            ],
                            [
                                "details",
                                "dict"
                            ]
                        ]
                    }
                ]
            }
        ],
        [
            "scenario_dag",
            {
                "inherits": [
                    "core_gui_shared"
                ],
                "properties": [
                    {
                        "name": "scenario",
                        "default_property": true,
                        "type": "dynamic(Scenario|list[Scenario])",
                        "doc": "The <code>Scenario^</code> whose diagram is displayed.<br/>If the value is a list, it must have a single element otherwise nothing is shown."
                    },
                    {
                        "name": "render",
                        "type": "dynamic(bool)",
                        "default_value": "True",
                        "doc": "If False, this scenario's DAG is not displayed."
                    },
                    {
                        "name": "show_toolbar",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the DAG toolbar is not visible."
                    },
                    {
                        "name": "height",
                        "type": "str",
                        "default_value": "\"50vh\"",
                        "doc": "The maximum height, in CSS units, of the control."
                    },
                    {
                        "name": "width",
                        "type": "str",
                        "default_value": "\"100%\"",
                        "doc": "The maximum width, in CSS units, of the control."
                    },
                    {
                        "name": "on_action",
                        "type": "Union[str, Callable]",
                        "doc": "A function or the name of a function that is triggered when a a node is selected.<br/><br/>All the parameters of that function are optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>entity (DataNode | Task): the entity (DataNode or Task) that was selected.</li>\n</ul>",
                        "signature": [
                            [
                                "state",
                                "State"
                            ],
                            [
                                "entity",
                                "Task | DataNode"
                            ]
                        ]
                    }
                ]
            }
        ],
        [
            "data_node_selector",
            {
                "inherits": [
                    "core_gui_shared"
                ],
                "properties": [
                    {
                        "name": "value",
                        "default_property": true,
                        "type": "dynamic(DataNode|list[DataNode])",
                        "doc": "Bound to the selected <code>DataNode^</code>(s), or None if there is none."
                    },
                    {
                        "name": "display_cycles",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the cycles are not shown in the selector."
                    },
                    {
                        "name": "show_primary_flag",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the primary scenarios are not identified with specific visual hint."
                    },
                    {
                        "name": "on_change",
                        "type": "Union[str, Callable]",
                        "doc": "A function or the name of a function that is triggered when a data node is selected.<br/>The parameters of that function are all optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>var_name (str): the variable name.</li>\n<li>value (<code>DataNode^</code>): the selected data node.</li>\n</ul>",
                        "signature": [
                            [
                                "state",
                                "State"
                            ],
                            [
                                "var_name",
                                "str"
                            ],
                            [
                                "value",
                                "optional[DataNode]"
                            ]
                        ]
                    },
                    {
                        "name": "height",
                        "type": "str",
                        "default_value": "\"50vh\"",
                        "doc": "The maximum height, in CSS units, of the control."
                    },
                    {
                        "name": "show_pins",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If True, a pin is shown on each item of the selector and allows to restrict the number of displayed items."
                    },
                    {
                        "name": "scenario",
                        "type": "dynamic(Scenario|list[Scenario])",
                        "doc": "TODO: If the <code>Scenario^</code> is set, the selector will only show datanodes owned by this scenario."
                    },
                    {
                        "name": "datanodes",
                        "type": "dynamic(list[DataNode|Scenario|Cycle])",
                        "doc": "TODO: The list of <code>DataNode^</code>/<code>Scenario^</code>/<code>Cycle^</code> to show. Shows all Cycle/Scenario/DataNode if value is None."
                    },
                    {
                        "name": "multiple",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "TODO: If True, the user can select multiple datanodes."
                    },
                    {
                        "name": "filter",
                        "type": "bool|str|taipy.gui_core.filters.DataNodeFilter|list[str|taipy.gui_core.filters.DataNodeFilter]",
                        "default_value": "\"*\"",
                        "doc": "TODO: a list of <code>DataNode^</code> attributes to filter on. If False, do not allow filter."
                    },
                    {
                        "name": "show_search",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "TODO: If True, allows the user to search locally on label."
                    },
                    {
                        "name": "sort",
                        "type": "bool|str|taipy.gui_core.filters.DataNodeFilter|list[str|taipy.gui_core.filters.DataNodeFilter]",
                        "default_value": "\"*\"",
                        "doc": "TODO: a list of <code>DataNode^</code> attributes to sort on. If False, do not allow sort."
                    }
                ]
            }
        ],
        [
            "data_node",
            {
                "inherits": [
                    "core_gui_shared"
                ],
                "properties": [
                    {
                        "name": "data_node",
                        "default_property": true,
                        "type": "dynamic(DataNode|list[DataNode])",
                        "doc": "The data node to display and edit.<br/>If the value is a list, it must have a single element otherwise nothing is shown."
                    },
                    {
                        "name": "active",
                        "type": "dynamic(bool)",
                        "default_value": "True",
                        "doc": "Indicates if this component is active.<br/>An inactive component allows no user interaction."
                    },
                    {
                        "name": "expandable",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If True, the data node viewer can be expanded.<br/>If False, the data node viewer is not expandable and it is shown depending on expanded value."
                    },
                    {
                        "name": "expanded",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If True, when a valid data node is selected, the data node viewer is expanded and its content is displayed.<br/>If False, the data node viewer is collapsed and only its name is visible."
                    },
                    {
                        "name": "show_config",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If False, the data node configuration label is not visible."
                    },
                    {
                        "name": "show_owner",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the data node owner label is not visible."
                    },
                    {
                        "name": "show_edit_date",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If False, the data node edition date is not visible."
                    },
                    {
                        "name": "show_expiration_date",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If False, the data node expiration date is not visible."
                    },
                    {
                        "name": "show_properties",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the data node properties are not visible."
                    },
                    {
                        "name": "show_history",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the data node history is not visible."
                    },
                    {
                        "name": "show_data",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the data node value is not visible."
                    },
                    {
                        "name": "show_owner_label",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If True, the data node owner label is added to the datanode label at the top of the block."
                    },
                    {
                        "name": "chart_config",
                        "type": "dict",
                        "doc": "Chart configs by data node configuration id."
                    },
                    {
                        "name": "scenario",
                        "type": "dynamic(Scenario)",
                        "doc": "A variable bound to this property is set to the selected <code>Scenario^</code> when the user picks it from the list of owner scenarios accessible from the 'Owner' field in the 'Properties' tab.<br/>This property is set to None if there is no selected owner scenario."
                    }
                ]
            }
        ],
        [
            "job_selector",
            {
                "inherits": [
                    "core_gui_shared"
                ],
                "properties": [
                    {
                        "name": "value",
                        "default_property": true,
                        "type": "dynamic(Job|list[Job])",
                        "doc": "Bound to the selected <code>Job^</code>(s), or None if there is none."
                    },
                    {
                        "name": "show_id",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the <code>Job^</code> id is not shown in the selector."
                    },
                    {
                        "name": "show_submitted_label",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the <code>Scenario^</code> or <code>Sequence^</code> label is not shown in the selector."
                    },
                    {
                        "name": "show_submitted_id",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If True, the <code>Scenario^</code> or <code>Sequence^</code> id is shown in the selector."
                    },
                    {
                        "name": "show_submission_id",
                        "type": "bool",
                        "default_value": "False",
                        "doc": "If True, the submission id is shown in the selector."
                    },
                    {
                        "name": "show_date",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the <code>Job^</code> date is not shown in the selector."
                    },
                    {
                        "name": "show_cancel",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the Cancel buttons are not shown in the selector."
                    },
                    {
                        "name": "show_delete",
                        "type": "bool",
                        "default_value": "True",
                        "doc": "If False, the Delete buttons are not shown in the selector."
                    },
                    {
                        "name": "on_change",
                        "type": "Union[str, Callable]",
                        "doc": "A function or the name of a function that is triggered when the selection is updated.<br/>The parameters of that function are all optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>var_name (str): the variable name.</li>\n<li>value (<code>Job^</code>): the selected job.</li>\n</ul>",
                        "signature": [
                            [
                                "state",
                                "State"
                            ],
                            [
                                "var_name",
                                "str"
                            ],
                            [
                                "value",
                                "optional[Job]"
                            ]
                        ]
                    },
                    {
                        "name": "height",
                        "type": "str",
                        "default_value": "\"50vh\"",
                        "doc": "The maximum height, in CSS units, of the control."
                    },
                    {
                        "name": "on_details",
                        "type": "Union[str, Callable, bool]",
                        "doc": "The name of a function that is triggered when the details icon is pressed.<br/>The parameters of that function are all optional:\n<ul>\n<li>state (<code>State^</code>): the state instance.</li>\n<li>id (str): the id of the control.</li>\n<li>payload (<code>dict</code>): a dictionary that contains the Job Id in the value for key <i>args<i>.</li>\n</ul></br>If False, the icon is not shown.",
                        "signature": [
                            [
                                "state",
                                "State"
                            ],
                            [
                                "id",
                                "str"
                            ],
                            [
                                "payload",
                                "dict"
                            ]
                        ]

                    }
                ]
            }
        ]
    ],
    "undocumented": [
        [
            "core_gui_shared",
            {
                "properties": [
                    {
                        "name": "id",
                        "type": "str",
                        "doc": "The identifier that will be assigned to the rendered HTML component."
                    },
                    {
                        "name": "class_name",
                        "type": "dynamic(str)",
                        "doc": "The list of CSS class names associated with the generated HTML Element.<br/>These class names will be added to the default <code>taipy_gui_core-&lt;element_type&gt;</code>."
                    }
                ]
            }
        ]
    ]
}
